<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>CentOS 无人值守安装</title>
    <link href="/posts/deploy-centos-8-with-kickstart/"/>
    <url>/posts/deploy-centos-8-with-kickstart/</url>
    
    <content type="html"><![CDATA[<p>最近接手了一个 Kubernetes 部署的工作，需要安装多台 CentOS 设备。安装系统虽然简单，但是耗时耗力，完全就是个体力活。考虑到之后还有装机需求，于是寻找了一下 CentOS 安装的无人值守方案，在这里记录一下。</p><h2 id="原理简述"><a href="#原理简述" class="headerlink" title="原理简述"></a>原理简述</h2><p>手动安装 CentOS 之后，会生成一个名为 <code>/root/anaconda-ks.cfg</code> 的 Kickstart 文件，通过此文件可以实现 CentOS 安装的无人托管。Redhat 有免费的全中文文档，且非常详细。本文就简述一下安装流程，不多做过多赘述了。</p><blockquote><p>官方文档：<a href="https://access.redhat.com/documentation/zh-cn/red_hat_enterprise_linux/8/html/performing_an_advanced_rhel_8_installation/index">https://access.redhat.com/documentation/zh-cn/red_hat_enterprise_linux/8/html/performing_an_advanced_rhel_8_installation/index</a></p></blockquote><h2 id="前置需求"><a href="#前置需求" class="headerlink" title="前置需求"></a>前置需求</h2><ul><li>一个可用的 CentOS 镜像源（内网镜像也可以）</li><li>一台可用的 HTTP 服务器</li></ul><h2 id="手动安装-CentOS"><a href="#手动安装-CentOS" class="headerlink" title="手动安装 CentOS"></a>手动安装 CentOS</h2><p>CentOS 安装完全图形化安装，根据自己的需求完成安装。服务器用途，软件包推荐选择 最小安装 -&gt; 标准安装。这样可以保证环境纯净，且够用。</p><h2 id="Kickstart-文件"><a href="#Kickstart-文件" class="headerlink" title="Kickstart 文件"></a>Kickstart 文件</h2><p>完成安装后，你将可以看到一个 <code>/root/anaconda-ks.cfg</code> 文件，根据需求对其进行简单调整。下面展示了一个 Kickstart 文件，它的是为安装 Kubernetes 设计的，并做了一些无法在图形界面调整的配置。</p><ul><li>安装完毕后自动重启</li><li>关闭 firewalld 和 selinux</li><li>安装时清空所有磁盘的所有分区（注意误删分区！！！）</li><li>不启用 home 和 swap 分区</li><li>root 密码为 1</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs kickstart">#version=RHEL8<br># Reboot after installation<br>reboot<br># Use graphical install<br>graphical<br><br>repo --name=&quot;AppStream&quot; --baseurl=https://mirrors.tuna.tsinghua.edu.cn/centos/8-stream/AppStream/x86_64/os<br><br>%packages<br>@^minimal-environment<br>@standard<br><br>%end<br><br># Keyboard layouts<br>keyboard --xlayouts=&#x27;cn&#x27;<br># System language<br>lang zh_CN.UTF-8<br><br># Firewall configuration<br>firewall --disabled<br># Network information<br>network  --bootproto=dhcp --device=ens160 --ipv6=auto --activate<br>network  --hostname=k8s-master<br><br># Use network installation<br>url --url=&quot;https://mirrors.tuna.tsinghua.edu.cn/centos/8-stream/BaseOS/x86_64/os&quot;<br><br># SELinux configuration<br>selinux --permissive<br><br># Run the Setup Agent on first boot<br>firstboot --enable<br><br>ignoredisk --only-use=nvme0n1<br>autopart --nohome --noswap<br># Partition clearing information<br>clearpart --all --initlabel<br><br># System timezone<br>timezone Asia/Shanghai --isUtc<br><br># Root password<br>rootpw --iscrypted $6$VM67DM5siXC4Mzvp$HYAwui.f4902tvs8zRFFq21WuW5REVhuRGt2xaj1YMSC0a.yZQ5mczjtMcutFJPub6lORwfBXl9WQAh73hp9b1<br><br>%addon com_redhat_kdump --enable --reserve-mb=&#x27;auto&#x27;<br><br>%end<br><br>%anaconda<br>pwpolicy root --minlen=6 --minquality=1 --notstrict --nochanges --notempty<br>pwpolicy user --minlen=6 --minquality=1 --notstrict --nochanges --emptyok<br>pwpolicy luks --minlen=6 --minquality=1 --notstrict --nochanges --notempty<br>%end<br></code></pre></td></tr></table></figure><h2 id="Kickstart-服务器"><a href="#Kickstart-服务器" class="headerlink" title="Kickstart 服务器"></a>Kickstart 服务器</h2><p>再另一台服务器启动一个 HTTP 服务器，这里使用了 nginx</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install nginx<br>systemctl enable --now nginx<br></code></pre></td></tr></table></figure><p>复制 Kickstart 文件到 &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html</p><p>验证一下服务器可用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">curl http://localhost/anaconda-ks.cfg<br></code></pre></td></tr></table></figure><h2 id="无人值守安装"><a href="#无人值守安装" class="headerlink" title="无人值守安装"></a>无人值守安装</h2><p>安装镜像启动进入 grub 菜单后，根据按 Tab (BIOS) 或 e (EFI)</p><p>再启动命令中，添加 Kickstart 文件参数：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">inst.ks=http:<span class="hljs-regexp">//</span>kickstart-server-ip/anaconda-ks.cfg<br></code></pre></td></tr></table></figure><p>继续启动自动完成安装。</p><h2 id="cockpit-控制界面"><a href="#cockpit-控制界面" class="headerlink" title="cockpit 控制界面"></a>cockpit 控制界面</h2><p>最后再安利一波 CentOS 自带的 cockpit，非常好用的 Web 管理工具。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl enable --now cockpit.socket<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>运维</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>CentOS</tag>
      
      <tag>Kickstart</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git Hooks 与 Husky</title>
    <link href="/posts/git-hooks-and-husky/"/>
    <url>/posts/git-hooks-and-husky/</url>
    
    <content type="html"><![CDATA[<p>前段时间学习 <a href="https://reactjs.org/">React</a> 的时候其实已经用过 <a href="https://reactjs.org/">Husky</a> 了，当时就只是知道它是一个 Git Hooks 管理工具，反正能跑就行，也没有纠结其原理。最近，在创建 <a href="https://pro.ant.design/">Ant Design Pro</a> 项目的时候，使用了 <a href="https://pnpm.io/zh/">pnpm</a> 包管理工具，发现它自带的 <a href="https://www.npmjs.com/package/@umijs/yorkie">yorkie</a> 不能正常安装 Git Hooks，就想到了使用 Husky 代替 yorkie，顺带学习了一下 Husky 的工作过程， 也给 Ant Design Pro 提交了 <a href="https://github.com/ant-design/ant-design-pro/pull/9718">Pull Request</a>，并且顺利合并了 🎉。</p><h2 id="什么是-Git-Hooks"><a href="#什么是-Git-Hooks" class="headerlink" title="什么是 Git Hooks?"></a>什么是 Git Hooks?</h2><p>Git Hooks 是运行在 git 指令各个阶段的 shell 脚本片段，可以用于代码风格检查，具体信息详见： <a href="https://git-scm.com/book/zh/v2/%E8%87%AA%E5%AE%9A%E4%B9%89-Git-Git-%E9%92%A9%E5%AD%90">Git - Git 钩子</a>。Git 在默认状态下会执行 <code>.git/hooks</code> 中的 Hooks，但是很显然，<code>.git</code> 中的文件是不会被加入到版本管理中，如果要需要团队协作，要求所有团队成员在提交 commit 时，统一执行一段用于语法检查或代码风格检查的代码，那显然是不合理的，毕竟不是所有的团队成员都会愿意或记得配置 Git Hooks 的。</p><h3 id="使用-Husky-自动配置-Git-Hooks"><a href="#使用-Husky-自动配置-Git-Hooks" class="headerlink" title="使用 Husky 自动配置 Git Hooks"></a>使用 Husky 自动配置 Git Hooks</h3><p>其实 Git 为我们提供了配置方式，通过 <code>git config core.hooksPath</code> 就可以将 hooks 文件的存放位置移动到 <code>.git</code> 文件夹之外， Husky 就是用来执行这一操作的，执行完 <code>husky install</code> 之后，我们就可以将 Git Hooks 编写在项目根目录下的 .husky 文件夹下了。然后我们可以将 <code>husky install</code> 添加到 package.json 的 prepare 生命周期中，这样我们每次执行 <code>pnpm install</code> 时，hooksPath 就能被自动配置了。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;scripts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;prepare&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;husky install&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;devDependencies&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;husky&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^7.0.4&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
      <tag>Husky</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript 学习心得</title>
    <link href="/posts/javascript-notes/"/>
    <url>/posts/javascript-notes/</url>
    
    <content type="html"><![CDATA[<p>第一次使用 JavaScript 编写代码大概是从大二开始的，当时主要是使用了 ECharts 做了一些简单地数据可视化。如今已经大四快毕业了，学习 JavaScript，断断续续，也有三年之久了，不能说对 JavaScript 十分熟悉，但是也算是小有心得。就简单地给大家分享一下如何去学习 JavaScript。</p><h2 id="初出茅庐"><a href="#初出茅庐" class="headerlink" title="初出茅庐"></a>初出茅庐</h2><p>对于 JavaScript 的初学者，还是首先要对 JavaScript 的整个语言体系由一定的了解，但是又不能去学习过于古老的 JavaScript 特性，因此一份现代化的 JavaScript 教程显得必不可少， <a href="https://zh.javascript.info/">https://zh.javascript.info/</a> 就是一不错的选择。</p><h2 id="小有心得"><a href="#小有心得" class="headerlink" title="小有心得"></a>小有心得</h2><p>如果你对 JavaScript 的基础知识已经有了一定的了解，那么就可以开始学习一些前端开发的框架了，前端开发目前比较流行的有 React 与 Vue，但是需要注意的是 React 应该着重学习函数式组件与 Hooks，学习 Vue 更应该去了解组合式 API，这些新的 API 通过技术性的手段将业务逻辑可以复用分离，让前端项目更加工程化，也是现在前端发展的大趋势。然后这一阶段如果遇到了不懂的 JS API 应该优先选择 <a href="https://developer.mozilla.org/zh-CN/">MDN Web Docs</a> 进行查阅。</p><h2 id="深入了解"><a href="#深入了解" class="headerlink" title="深入了解"></a>深入了解</h2><p>JavaScript 语言因为它的特性，可以被运行在不同的浏览器上，不同浏览器的 JS 解释器也各不相同，JS 的运行效率也不尽相同。就拿 V8 引擎来说，一个简单的 JS 数组，在不同的状态下，它在内存中的结构都是不一样的，根据不同的存储数据，JS 的数组会在线性存储与哈希表之间转换。如果你对 JS 解释器内部的原理掌握的更加清楚，可以潜移默化的影响你编写出程序的运行效率。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>一门语言的学习无非就要是去学习它的语法规则，语言特性以及标准库。语法规则就比较简单，如果你已经掌握过了一到两编程语言，一般可以在很短的时间内就搞定了。编程语言的学习其实更注重的是它的语言特性以及标准库，这些才是衡量你是否真正掌握这门语言的标准。当然有时时也不能过度的沉迷于语言本身，我非常认同 Onion 同学的观点：学到什么，就应该直接把它们用起来。用起来了，再继续去了解它，你才会有更深入的体会。</p><p>与此同时，编程语言与人一样也是会成长的，不断的会有人提出新的标准，不断地迭代。新特性地出现往往切实地解决了一些技术上地难点，因此作为一个软件开发工程师，也更应该去不断去学习一门语言的新特性，这可以帮助你在今后的程序设计中少走很多弯路。</p><p>如今的 JavaScript 也不是 ES6 的时代了，ES11 也已经发布多时。async 函数、对象展开运算符，在一些比较现代的项目中也早已大规模使用。</p>]]></content>
    
    
    <categories>
      
      <category>前端开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用 GitHub Actions 部署 Hexo 博客</title>
    <link href="/posts/deploy-hexo-blog-with-github-actions/"/>
    <url>/posts/deploy-hexo-blog-with-github-actions/</url>
    
    <content type="html"><![CDATA[<p>毕设也差不多快完工了，大学生活已经进入了尾声。大学四年，多多少少还是学习了不少编程知识，但是一直没有写一些文章把它们记录下来，还是有些可惜。 最近，终于下定决心开始写博客了，主要是为了记录一下自己的学习历程，也希望能给大家分享一点自己所学的知识。那么这次就直接从<em>使用 GitHub Actions 部署 Hexo 博客</em>开始吧。</p><h2 id="什么是-Hexo"><a href="#什么是-Hexo" class="headerlink" title="什么是 Hexo?"></a>什么是 Hexo?</h2><p><a href="https://github.com/hexojs/hexo">Hexo</a> 是一个基于 Node.js 的静态博客框架。Hexo 框架可以根据博客源码（Markdown, EJS 等）自动生成静态网页网页，网页可以被直接被托管到 GitHub Pages 上面展示。同时，Markdown 格式的博文，很容易就可以存放到 Git 仓库中，进行版本管理。作为一个软件开发工程师，我觉得这是一个非常炫酷的功能，因此这次博客框架就使用它了。</p><h2 id="创建-Hexo-项目"><a href="#创建-Hexo-项目" class="headerlink" title="创建 Hexo 项目"></a>创建 Hexo 项目</h2><h3 id="安装-Node-js-与-Git"><a href="#安装-Node-js-与-Git" class="headerlink" title="安装 Node.js 与 Git"></a>安装 Node.js 与 Git</h3><p>Hexo 要求我们先安装 Node.js 与 Git，它们的安装包直接可以从官网下载。</p><ul><li><a href="https://nodejs.org/zh-cn/">Node.js</a></li><li><a href="https://git-scm.com/">Git</a></li></ul><p>安装完成后，在 Terminal 中验证一下安装，如果出现版本号，则表示安装成功。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">node -v<br>git --version<br></code></pre></td></tr></table></figure><h3 id="初始化-Hexo-项目"><a href="#初始化-Hexo-项目" class="headerlink" title="初始化 Hexo 项目"></a>初始化 Hexo 项目</h3><p>为了更加方便地创建 Hexo 项目，首先需要安装 hexo-cli 工具。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install hexo-cli -g<br></code></pre></td></tr></table></figure><p>选择一个你喜欢的目录，用于初始化 Hexo 博客。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo init hello-hexo<br></code></pre></td></tr></table></figure><p>这将会创建一个 hello-hexo 的文件夹，里面就是博客源码。</p><p>进入 hello-hexo 文件夹，启动 Hexo 服务器。</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs axapta">cd hello-hexo<br>hexo <span class="hljs-keyword">server</span><br></code></pre></td></tr></table></figure><p>运行成功后，就可以看到刚刚创建的博客了，界面如下：</p><img src="/posts/deploy-hexo-blog-with-github-actions/preview-hexo-blog.png" class="" title="预览 Hexo 博客"><h3 id="第一篇博文"><a href="#第一篇博文" class="headerlink" title="第一篇博文"></a>第一篇博文</h3><p>打开一个新的 Terminal 窗口，来创建属于我们的第一篇博客。</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">hexo <span class="hljs-keyword">new</span> <span class="hljs-symbol">&#x27;deploy</span> hexo blog <span class="hljs-keyword">with</span> github actions&#x27;<br></code></pre></td></tr></table></figure><p>Markdown 格式的博客将被被生成到了 source&#x2F;_post&#x2F; 文件夹中，可以通过任意编辑器来编写它。</p><p>无需重启 Hexo 服务器，新的文章就可以在浏览器中被自动展示出来。</p><h2 id="使用-GitHub-Actions-自动部署-GitHub-Pages"><a href="#使用-GitHub-Actions-自动部署-GitHub-Pages" class="headerlink" title="使用 GitHub Actions 自动部署 GitHub Pages"></a>使用 GitHub Actions 自动部署 GitHub Pages</h2><p>现在我们的网站只能在本地访问，通过将它部署到 GitHub Pages 上，我们就能在任意位置访问了。本次我们使用 GitHub Actions 来实现 Hexo 博客的自动部署。GitHub Actions 是 GitHub 提供的 CI&#x2F;CD 工具，对于开源项目，它可以免费无限制的使用。</p><h3 id="上传到-GitHub"><a href="#上传到-GitHub" class="headerlink" title="上传到 GitHub"></a>上传到 GitHub</h3><p>首先，我们为 Hexo 项目添加一下 Git 支持。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-meta"># Ctrl + C 先关闭 hexo server</span><br>git <span class="hljs-keyword">init</span><br>git <span class="hljs-keyword">add</span> .<br>git commit -m <span class="hljs-string">&#x27;首次提交&#x27;</span><br></code></pre></td></tr></table></figure><p>然后去 GitHub 上创建一个对应的 Git 仓库。</p><img src="/posts/deploy-hexo-blog-with-github-actions/create-github-repository.png" class="" title="创建 GitHub 仓库"><p>将本地项目连接到 GitHub 仓库，并上传。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">git remote add origin https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/fanck0605/</span>hello-hexo.git<br>git branch -M main<br>git push -u origin main<br></code></pre></td></tr></table></figure><h3 id="启用-GitHub-Actions-写权限"><a href="#启用-GitHub-Actions-写权限" class="headerlink" title="启用 GitHub Actions 写权限"></a>启用 GitHub Actions 写权限</h3><p>公开的 GitHub 仓库，Actions 是没有写权限的，首先需要对 Actions 的权限进行配置，详见：<a href="https://github.blog/changelog/2021-04-20-github-actions-control-permissions-for-github_token/">GitHub Actions: Control permissions for GITHUB_TOKEN</a></p><img src="/posts/deploy-hexo-blog-with-github-actions/enable-github-actions-write-access.png" class="" title="启用 GitHub Actions 写权限"><h3 id="编写-GitHub-Actions-脚本"><a href="#编写-GitHub-Actions-脚本" class="headerlink" title="编写 GitHub Actions 脚本"></a>编写 GitHub Actions 脚本</h3><p>为了方便代码的编写，我们可以使用 VS Code 打开项目文件夹。</p><img src="/posts/deploy-hexo-blog-with-github-actions/open-hexo-project-with-vscode.png" class="" title="使用 VSCode 打开 Hexo 项目"><p>GitHub 与我们约定，放置在 Git 仓库 <code>.github/workflows</code> 下的 <code>.yml</code> 文件都会被识别为 Actions 脚本。对于 Hexo 博客的部署，我们只需要编写一个 <code>deploy.yml</code> 文件即可。具体如何编写，网上有非常多的教程，就不再赘述了，下面直接放出代码：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">//</span> <span class="hljs-string">.github/workflows/deploy.yml</span><br><span class="hljs-attr">name:</span> <span class="hljs-string">Deploy</span> <span class="hljs-string">Hexo</span><br><br><span class="hljs-attr">on:</span><br>  <span class="hljs-attr">push:</span><br>    <span class="hljs-attr">branches:</span> [ <span class="hljs-string">main</span> ]<br><br><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">deploy:</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br><br>    <span class="hljs-attr">steps:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Checkout</span> <span class="hljs-string">project</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v3</span><br><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Set</span> <span class="hljs-string">up</span> <span class="hljs-string">pnpm</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">pnpm/action-setup@v2</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">version:</span> <span class="hljs-string">latest</span><br><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Use</span> <span class="hljs-string">Node.js</span> <span class="hljs-number">16</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/setup-node@v3</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">node-version:</span> <span class="hljs-number">16</span><br>          <span class="hljs-attr">cache:</span> <span class="hljs-string">pnpm</span><br><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Install</span> <span class="hljs-string">dependencies</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">pnpm</span> <span class="hljs-string">install</span> <span class="hljs-string">--shamefully-hoist</span> <span class="hljs-string">--frozen-lockfile</span><br><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Build</span> <span class="hljs-string">Hexo</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">pnpm</span> <span class="hljs-string">build</span><br><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Deploy</span> <span class="hljs-string">Hexo</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">peaceiris/actions-gh-pages@v3</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">github_token:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.GITHUB_TOKEN</span> <span class="hljs-string">&#125;&#125;</span><br>          <span class="hljs-attr">publish_dir:</span> <span class="hljs-string">./public</span><br></code></pre></td></tr></table></figure><h3 id="配置网站根目录"><a href="#配置网站根目录" class="headerlink" title="配置网站根目录"></a>配置网站根目录</h3><p>在 _config.yml 中，将 root 设置为你的仓库名称。(如果你的仓库名称是 [用户名].github.io, 则无需配置 Hexo 的根路径。)</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs diff">root: /hello-hexo<br></code></pre></td></tr></table></figure><p>编写完毕后，可以直接在 VS Code 中，保存 Git 修改，然后 push 到服务器上。</p><img src="/posts/deploy-hexo-blog-with-github-actions/git-operations-with-vscode.png" class="" title="使用 VSCode 进行 Git 操作"><p>在 Actions 选项卡中查看部署进度。</p><img src="/posts/deploy-hexo-blog-with-github-actions/github-actions-status.png" class="" title="查看 GitHub Actions 状态"><h3 id="启用-GitHub-Pages"><a href="#启用-GitHub-Pages" class="headerlink" title="启用 GitHub Pages"></a>启用 GitHub Pages</h3><p>部署完成后，将 GitHub Pages 设置为 gh-pages 分支。</p><img src="/posts/deploy-hexo-blog-with-github-actions/configure-github-pages.png" class="" title="配置 GitHub Pages"><p>等待几分钟，GitHub Pages 就能访问了，网站地址为：https:&#x2F;&#x2F;[用户名].github.io&#x2F;[仓库名称]&#x2F;</p><img src="/posts/deploy-hexo-blog-with-github-actions/hexo-blog-in-github-pages.png" class="" title="GitHub Pages 上的 Hexo 博客"><h2 id="附：修复-Hexo-渲染问题（Workaround）"><a href="#附：修复-Hexo-渲染问题（Workaround）" class="headerlink" title="附：修复 Hexo 渲染问题（Workaround）"></a>附：修复 Hexo 渲染问题（Workaround）</h2><p><strong>2022-05-20 更新：问题已修复，主要是由于 <a href="https://github.com/isaacs/node-glob">node-glob</a> 无法处理 windows 的路径分隔符导致的。</strong></p><p>最近（2022-05-14）几个版本的 Hexo 项目，使用 <code>hexo init</code> 创建完后，在 Windows 下，不能正常地进行界面渲染（<a href="https://github.com/hexojs/hexo/issues/4968">hexojs&#x2F;hexo#4968</a>），经过排查发现是新版本地 <code>stylus</code> 无法正常地编译 <code>.styl</code> 文件导致的。</p><p>最简单的解决方式就是将 <code>stylus</code> 替换成老版的，但是 <code>package.json</code> 中其实并没有手动引入 <code>stylus</code> 依赖，而是通过 <code>hexo-renderer-stylus</code> 间接引入的。在 pnpm 下，可以通过编写 <a href="https://www.pnpm.cn/pnpmfile">pnpm Hooks</a> 来修改间接引入的依赖版本。代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// .pnpmfile.cjs</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">readPackage</span>(<span class="hljs-params">pkg, context</span>) &#123;<br>  <span class="hljs-keyword">if</span> (pkg.<span class="hljs-property">name</span> === <span class="hljs-string">&#x27;hexo-renderer-stylus&#x27;</span>) &#123;<br>    pkg.<span class="hljs-property">dependencies</span> = &#123;<br>      ...pkg.<span class="hljs-property">dependencies</span>,<br>      <span class="hljs-attr">stylus</span>: <span class="hljs-string">&#x27;0.54.5&#x27;</span>,<br>    &#125;;<br>    context.<span class="hljs-title function_">log</span>(<br>      <span class="hljs-string">&#x27;stylus@^0.54.8 =&gt; stylus@0.54.5 in dependencies of hexo-renderer-stylus@v2.0.0&#x27;</span><br>    );<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> pkg;<br>&#125;<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">hooks</span>: &#123;<br>    readPackage,<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CI/CD</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>GitHub Actions</tag>
      
      <tag>GitHub Pages</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
